/// Sales table for year over year analysis
table Sales
	lineageTag: 97143e5b-7736-4fcb-8042-26b92b1f5684

	measure 'Sales Amount' = SUMX('Sales', 'Sales'[Quantity] * 'Sales'[Net Price])
		formatString: $ #,##0
		lineageTag: a8e95485-02a2-4525-b02a-b2418fbdbe4c

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isCustom":true}

	measure '# Sales' = COUNTROWS('Sales')
		formatString: #,0
		lineageTag: 67791bd1-5f33-4a29-a9ac-be0ad2453fcf

		changedProperty = FormatString

		changedProperty = IsHidden

	measure 'Sales Amount (LY)' = CALCULATE([Sales Amount], SAMEPERIODLASTYEAR('Calendar'[Date]))
		formatString: "€"#,0;("€"#,0);"€"#,0
		lineageTag: 8a7e1962-91a4-4e1d-95ec-c5495f4bcf40

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	column 'Order Number'
		dataType: int64
		formatString: 0
		lineageTag: e2e629f1-f1fb-4444-a627-b121d77fdc06
		summarizeBy: none
		sourceColumn: Order Number

		annotation SummarizationSetBy = User

	column 'Line Number'
		dataType: int64
		formatString: 0
		lineageTag: d4046972-90a5-46b2-badb-709e834b99af
		summarizeBy: none
		sourceColumn: Line Number

		annotation SummarizationSetBy = User

	column 'Order Date'
		dataType: dateTime
		formatString: Long Date
		lineageTag: d2d074d6-be1f-4dfd-b826-cd99fe83bc3a
		summarizeBy: none
		sourceColumn: Order Date

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["HIDE_FOREIGN_KEYS","RELATIONSHIP_COLUMNS_SHOULD_BE_OF_INTEGER_DATA_TYPE"]}

	column 'Delivery Date'
		dataType: dateTime
		formatString: Long Date
		lineageTag: 1056fc0f-d1e5-4872-a39b-25603dba5cf5
		summarizeBy: none
		sourceColumn: Delivery Date

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["HIDE_FOREIGN_KEYS","RELATIONSHIP_COLUMNS_SHOULD_BE_OF_INTEGER_DATA_TYPE"]}

	column CustomerKey
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: 4de77f33-318d-4006-85db-580cb119fc6a
		summarizeBy: none
		sourceColumn: CustomerKey

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column StoreKey
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: cf26d73c-10d7-40ac-83a3-c91c04e948d8
		summarizeBy: none
		sourceColumn: StoreKey

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column ProductKey
		dataType: int64
		isHidden
		formatString: 0
		isAvailableInMdx: false
		lineageTag: 595525b1-f5ca-442e-a226-0cc478b823c0
		summarizeBy: none
		sourceColumn: ProductKey

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

	column 'Unit Cost'
		dataType: decimal
		isHidden
		isAvailableInMdx: false
		lineageTag: 03a43676-2ce4-4678-a4a7-0ee8f4e00b17
		summarizeBy: sum
		sourceColumn: Unit Cost

		changedProperty = IsHidden

		annotation SummarizationSetBy = Automatic

		annotation BestPracticeAnalyzer_IgnoreRules = {"RuleIDs":["REMOVE_REDUNDANT_COLUMNS_IN_RELATED_TABLES"]}

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Currency Code'
		dataType: string
		lineageTag: a75ba79f-22a3-4bfd-9b52-80e5d73247a9
		summarizeBy: none
		sourceColumn: Currency Code

		annotation SummarizationSetBy = Automatic

	column 'Exchange Rate'
		dataType: decimal
		lineageTag: 0b3f913f-1587-4280-a8bb-21ab7d661086
		summarizeBy: none
		sourceColumn: Exchange Rate

		annotation SummarizationSetBy = User

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column Environment
		dataType: string
		lineageTag: 05fb6ae8-19b4-40c5-81b2-e40a6edd8692
		summarizeBy: none
		sourceColumn: Environment

		annotation SummarizationSetBy = Automatic

	column Time
		dataType: dateTime
		formatString: Long Time
		lineageTag: 00586e3b-f4b1-4314-9cff-0a9695c99eb2
		summarizeBy: none
		sourceColumn: Time

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Time

	column Quantity
		dataType: int64
		formatString: 0
		lineageTag: ee6c821a-1a5f-4f3b-bc18-3a7587aff19b
		summarizeBy: sum
		sourceColumn: Quantity

		annotation SummarizationSetBy = Automatic

	column 'Net Price'
		dataType: decimal
		formatString: "€"#,0.###############;("€"#,0.###############);"€"#,0.###############
		lineageTag: 0326d41e-e712-427b-965d-7ed3087016a5
		summarizeBy: sum
		sourceColumn: Net Price

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	partition Sales-2022 = m
		mode: import
		source =
				let
				    Source = Csv.Document(
				        Web.Contents(HttpSource, [RelativePath = "RAW-Sales.csv"]),
				        [Delimiter = ",", Columns = 13, Encoding = 65001, QuoteStyle = QuoteStyle.None]
				    ),
				    Promoted = Table.PromoteHeaders(Source, [PromoteAllScalars = true]),
				    Typed = Table.TransformColumnTypes(
				        Promoted,
				        {
				            {"Order Number", Int64.Type}, {"Line Number", Int64.Type},
				            {"Order Date", type date}, {"Delivery Date", type date},
				            {"CustomerKey", Int64.Type}, {"StoreKey", Int64.Type},
				            {"ProductKey", Int64.Type}, {"Quantity", Int64.Type},
				            {"Unit Price", Currency.Type}, {"Net Price", Currency.Type},
				            {"Unit Cost", Currency.Type}, {"Currency Code", type text},
				            {"Exchange Rate", Currency.Type}
				        }
				    ),
				    WithTime = Table.AddColumn(
				        Typed, "Time",
				        each #time(Number.RoundDown(Number.RandomBetween(0, 23), 0), Number.RoundDown(Number.RandomBetween(0, 59), 0), 0),
				        type time
				    ),
				    YearsDiff = (Date.Year(DateTime.LocalNow()) - 3) - Date.Year(List.Min(WithTime[Order Date])),
				    AdjustedDates = Table.TransformColumns(
				        WithTime,
				        {{"Order Date", each Date.AddYears(_, YearsDiff), type date}, {"Delivery Date", each Date.AddYears(_, YearsDiff), type date}}
				    ),
				    WithNewCols = Table.TransformColumns(
				        Table.AddColumn(
				            Table.AddColumn(AdjustedDates, "NewQuantity",
				                each Number.RoundDown(Number.RandomBetween(
				                    List.Max({1, [Quantity] - ([Quantity] * Randomizer)}),
				                    List.Min({[Quantity], [Quantity] + ([Quantity] * Randomizer)})
				                )), Int64.Type),
				            "NewNetPrice",
				            each Number.Round(Number.RandomBetween(
				                List.Max({1, [Net Price] - ([Net Price] * Randomizer)}),
				                List.Min({[Net Price], [Net Price] + ([Net Price] * Randomizer)})
				            ), 3),
				            Currency.Type
				        ),
				        {{"Order Date", each _, type date}, {"Delivery Date", each _, type date}}
				    ),
				    Final = Table.AddColumn(
				            Table.RenameColumns(
				                Table.RemoveColumns(WithNewCols, {"Quantity", "Net Price", "Unit Price"}),
				                {{"NewQuantity", "Quantity"}, {"NewNetPrice", "Net Price"}}
				            ),
				            "Environment", each Environment, type text
				        ),
					DateFilter = Table.SelectRows(Final, each [Order Date] >= #date(2022, 1, 1) and [Order Date] <= #date(2022, 12, 31))
				in
				    DateFilter

	partition Sales-2023 = m
		mode: import
		source =
				let
				    Source = Csv.Document(
				        Web.Contents(HttpSource, [RelativePath = "RAW-Sales.csv"]),
				        [Delimiter = ",", Columns = 13, Encoding = 65001, QuoteStyle = QuoteStyle.None]
				    ),
				    Promoted = Table.PromoteHeaders(Source, [PromoteAllScalars = true]),
				    Typed = Table.TransformColumnTypes(
				        Promoted,
				        {
				            {"Order Number", Int64.Type}, {"Line Number", Int64.Type},
				            {"Order Date", type date}, {"Delivery Date", type date},
				            {"CustomerKey", Int64.Type}, {"StoreKey", Int64.Type},
				            {"ProductKey", Int64.Type}, {"Quantity", Int64.Type},
				            {"Unit Price", Currency.Type}, {"Net Price", Currency.Type},
				            {"Unit Cost", Currency.Type}, {"Currency Code", type text},
				            {"Exchange Rate", Currency.Type}
				        }
				    ),
				    WithTime = Table.AddColumn(
				        Typed, "Time",
				        each #time(Number.RoundDown(Number.RandomBetween(0, 23), 0), Number.RoundDown(Number.RandomBetween(0, 59), 0), 0),
				        type time
				    ),
				    YearsDiff = (Date.Year(DateTime.LocalNow()) - 3) - Date.Year(List.Min(WithTime[Order Date])),
				    AdjustedDates = Table.TransformColumns(
				        WithTime,
				        {{"Order Date", each Date.AddYears(_, YearsDiff), type date}, {"Delivery Date", each Date.AddYears(_, YearsDiff), type date}}
				    ),
				    WithNewCols = Table.TransformColumns(
				        Table.AddColumn(
				            Table.AddColumn(AdjustedDates, "NewQuantity",
				                each Number.RoundDown(Number.RandomBetween(
				                    List.Max({1, [Quantity] - ([Quantity] * Randomizer)}),
				                    List.Min({[Quantity], [Quantity] + ([Quantity] * Randomizer)})
				                )), Int64.Type),
				            "NewNetPrice",
				            each Number.Round(Number.RandomBetween(
				                List.Max({1, [Net Price] - ([Net Price] * Randomizer)}),
				                List.Min({[Net Price], [Net Price] + ([Net Price] * Randomizer)})
				            ), 3),
				            Currency.Type
				        ),
				        {{"Order Date", each _, type date}, {"Delivery Date", each _, type date}}
				    ),
				    Final = Table.AddColumn(
				            Table.RenameColumns(
				                Table.RemoveColumns(WithNewCols, {"Quantity", "Net Price", "Unit Price"}),
				                {{"NewQuantity", "Quantity"}, {"NewNetPrice", "Net Price"}}
				            ),
				            "Environment", each Environment, type text
				        ),
					DateFilter = Table.SelectRows(Final, each [Order Date] >= #date(2023, 1, 1) and [Order Date] <= #date(2023, 12, 31))
				in
				    DateFilter

	partition Sales-2024 = m
		mode: import
		source =
				let
				    Source = Csv.Document(
				        Web.Contents(HttpSource, [RelativePath = "RAW-Sales.csv"]),
				        [Delimiter = ",", Columns = 13, Encoding = 65001, QuoteStyle = QuoteStyle.None]
				    ),
				    Promoted = Table.PromoteHeaders(Source, [PromoteAllScalars = true]),
				    Typed = Table.TransformColumnTypes(
				        Promoted,
				        {
				            {"Order Number", Int64.Type}, {"Line Number", Int64.Type},
				            {"Order Date", type date}, {"Delivery Date", type date},
				            {"CustomerKey", Int64.Type}, {"StoreKey", Int64.Type},
				            {"ProductKey", Int64.Type}, {"Quantity", Int64.Type},
				            {"Unit Price", Currency.Type}, {"Net Price", Currency.Type},
				            {"Unit Cost", Currency.Type}, {"Currency Code", type text},
				            {"Exchange Rate", Currency.Type}
				        }
				    ),
				    WithTime = Table.AddColumn(
				        Typed, "Time",
				        each #time(Number.RoundDown(Number.RandomBetween(0, 23), 0), Number.RoundDown(Number.RandomBetween(0, 59), 0), 0),
				        type time
				    ),
				    YearsDiff = (Date.Year(DateTime.LocalNow()) - 3) - Date.Year(List.Min(WithTime[Order Date])),
				    AdjustedDates = Table.TransformColumns(
				        WithTime,
				        {{"Order Date", each Date.AddYears(_, YearsDiff), type date}, {"Delivery Date", each Date.AddYears(_, YearsDiff), type date}}
				    ),
				    WithNewCols = Table.TransformColumns(
				        Table.AddColumn(
				            Table.AddColumn(AdjustedDates, "NewQuantity",
				                each Number.RoundDown(Number.RandomBetween(
				                    List.Max({1, [Quantity] - ([Quantity] * Randomizer)}),
				                    List.Min({[Quantity], [Quantity] + ([Quantity] * Randomizer)})
				                )), Int64.Type),
				            "NewNetPrice",
				            each Number.Round(Number.RandomBetween(
				                List.Max({1, [Net Price] - ([Net Price] * Randomizer)}),
				                List.Min({[Net Price], [Net Price] + ([Net Price] * Randomizer)})
				            ), 3),
				            Currency.Type
				        ),
				        {{"Order Date", each _, type date}, {"Delivery Date", each _, type date}}
				    ),
				    Final = Table.AddColumn(
				            Table.RenameColumns(
				                Table.RemoveColumns(WithNewCols, {"Quantity", "Net Price", "Unit Price"}),
				                {{"NewQuantity", "Quantity"}, {"NewNetPrice", "Net Price"}}
				            ),
				            "Environment", each Environment, type text
				        ),
					DateFilter = Table.SelectRows(Final, each [Order Date] >= #date(2024, 1, 1) and [Order Date] <= #date(2024, 12, 31))
				in
				    DateFilter

	annotation PBI_Id = 975ddcc4-65e2-4eb0-9c9c-2c5ef0586f0e

	annotation LinkedQueryName = Sales

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

